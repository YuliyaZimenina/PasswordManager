package com.zimenina.yuliya.controller;

import com.zimenina.yuliya.model.PasswordEntry;
import com.zimenina.yuliya.util.Storage;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MainController {
    private static final Logger logger = LoggerFactory.getLogger(MainController.class);

    @FXML private TableView<PasswordEntry> tableView;
    @FXML private TableColumn<PasswordEntry, String> serviceColumn;
    @FXML private TableColumn<PasswordEntry, String> usernameColumn;
    @FXML private TableColumn<PasswordEntry, String> passwordColumn;
    @FXML private TextField serviceField;
    @FXML private TextField usernameField;
    @FXML private PasswordField passwordField;
    @FXML private Button togglePasswordButton;

    private TextField visiblePasswordField;
    private boolean passwordVisible = false;

    private final ObservableList<PasswordEntry> passwordList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        serviceColumn.setCellValueFactory(new PropertyValueFactory<>("service"));
        usernameColumn.setCellValueFactory(new PropertyValueFactory<>("username"));
        passwordColumn.setCellValueFactory(new PropertyValueFactory<>("password"));

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –ø–∞—Ä–æ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        passwordColumn.setCellFactory(col -> new TableCell<PasswordEntry, String>() {
            private final Button toggleButton = new Button("üëÅ");

            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || getTableRow() == null || getTableRow().getItem() == null) {
                    setText(null);
                    setGraphic(null);
                } else {
                    PasswordEntry entry = getTableRow().getItem();
                    setText(null); // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º HBox

                    toggleButton.setText(entry.isPasswordVisible() ? "üôà" : "üëÅ");
                    toggleButton.setOnAction(event -> {
                        entry.setPasswordVisible(!entry.isPasswordVisible());
                        getTableView().refresh(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                    });

                    HBox hbox = new HBox(5);
                    hbox.getChildren().addAll(new Label(entry.getPassword()), toggleButton);
                    setGraphic(hbox);
                }
            }
        });

        loadData();
        tableView.setItems(passwordList);
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", passwordList.size());

        visiblePasswordField = new TextField();
        visiblePasswordField.setPromptText("Password");
        visiblePasswordField.setPrefWidth(200);
        visiblePasswordField.setManaged(false);
        visiblePasswordField.setVisible(false);

        StackPane parent = (StackPane) passwordField.getParent();
        parent.getChildren().add(visiblePasswordField);
    }

    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ MainController.java –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private void loadData() {
        try {
            passwordList.setAll(Storage.load());
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ data.json. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {}", passwordList.size());
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ", e);
            showAlert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –§–∞–π–ª data.json –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.");
        }
    }

    @FXML
    private void onAdd() {
        String service = serviceField.getText();
        String username = usernameField.getText();
        String password = passwordVisible ? visiblePasswordField.getText() : passwordField.getText();

        if (!service.isEmpty() && !username.isEmpty() && !password.isEmpty()) {
            PasswordEntry entry = new PasswordEntry(service, username, password);
            passwordList.add(entry);
            clearFields();
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {}", service);
        }
    }

    @FXML
    private void onEdit() {
        PasswordEntry selectedEntry = tableView.getSelectionModel().getSelectedItem();
        if (selectedEntry != null) {
            serviceField.setText(selectedEntry.getService());
            usernameField.setText(selectedEntry.getUsername());
            if (passwordVisible) {
                visiblePasswordField.setText(selectedEntry.getPassword());
            } else {
                passwordField.setText(selectedEntry.getPassword());
            }
        } else {
            showAlert("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
        }
    }

    @FXML
    private void onDelete() {
        PasswordEntry selectedEntry = tableView.getSelectionModel().getSelectedItem();
        if (selectedEntry != null) {
            passwordList.remove(selectedEntry);
            logger.info("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: {}", selectedEntry.getService());
        } else {
            showAlert("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        }
    }

    @FXML
    private void onSave() {
        try {
            Storage.save(passwordList);
            showAlert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª data.json.");
            logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {}", passwordList.size());
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ", e);
            showAlert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
        }
    }

    @FXML
    private void onTogglePasswordVisibility() {
        passwordVisible = !passwordVisible;

        if (passwordVisible) {
            visiblePasswordField.setText(passwordField.getText());
            visiblePasswordField.setVisible(true);
            visiblePasswordField.setManaged(true);

            passwordField.setVisible(false);
            passwordField.setManaged(false);

            togglePasswordButton.setText("üôà");
        } else {
            passwordField.setText(visiblePasswordField.getText());
            passwordField.setVisible(true);
            passwordField.setManaged(true);

            visiblePasswordField.setVisible(false);
            visiblePasswordField.setManaged(false);

            togglePasswordButton.setText("üëÅ");
        }
    }

    private void clearFields() {
        serviceField.clear();
        usernameField.clear();
        passwordField.clear();
        visiblePasswordField.clear();
    }

    @FXML
    private void onClear() {
        clearFields();
        logger.info("–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}